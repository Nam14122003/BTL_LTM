/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package server.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import server.RunServer;
import server.controller.Admin;
import server.db.layers.dal.ServerDAL;
import server.db.layers.dto.Server;
import shared.helper.ServerHelper;

/**
 *
 * @author Admin
 */
public class ServerHome extends javax.swing.JFrame {

    /**
     * Creates new form ServerHome
     */
    private ArrayList<Server> servers;

    public ServerHome(ArrayList<Server> servers) {
        this.servers = servers;
        initComponents();

        this.setSize(1200, 800);
        this.setResizable(false);
        this.setLocation(600, 350);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Font headerFont = new Font("Tahoma", Font.BOLD, 18);
        tableServer.getTableHeader().setFont(headerFont);

        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) tableServer.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        TableColumnModel columnModel = tableServer.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setCellRenderer(centerRenderer);
        }
        tableServer.setRowHeight(30);

        labelTitle.setBackground(Color.CYAN); // Màu nền
        labelTitle.setOpaque(true); // Đặt JLabel thành trong suốt
        labelTitle.setHorizontalAlignment(SwingConstants.CENTER);

        DefaultTableModel model = (DefaultTableModel) tableServer.getModel();

        for (Server server : servers) {
            model.addRow(new Object[]{server, "1", server.getServerIp(), server.getServerPort(), "Bật/Tắt", server.getStatus(), "2"});
        }

        tableServer.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
        tableServer.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox(), tableServer));

        tableServer.getColumnModel().getColumn(6).setCellRenderer(new DetailButtonRenderer());
        tableServer.getColumnModel().getColumn(6).setCellEditor(new DetailButtonEditor(new JCheckBox(), tableServer));

        TableColumn serverColumn = tableServer.getColumnModel().getColumn(0); // Cột chứa Server
        serverColumn.setMinWidth(0);
        serverColumn.setMaxWidth(0);
        serverColumn.setPreferredWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableServer = new javax.swing.JTable();
        labelTitle = new javax.swing.JLabel();
        btnAddServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableServer.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        tableServer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server", "Tên Server", "Địa chỉ IP", "Cổng", "Hành động", "Trạng thái", "Xem chi tiết"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableServer);

        labelTitle.setBackground(new java.awt.Color(51, 255, 255));
        labelTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        labelTitle.setText("Cờ Caro - Server");
        labelTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnAddServer.setText("Thêm Server");
        btnAddServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddServer, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnAddServer, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("1");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTable tableServer;
    // End of variables declaration//GEN-END:variables
}

class ButtonEditor extends DefaultCellEditor {

    protected JButton button;
    private Server currentServer;
    private String status;
    private int serverId;
    private static int ok = 0;

    private JTable table;

    public ButtonEditor(JCheckBox checkBox, JTable table) {
        super(checkBox);
        this.table = table;
        button = new JButton();
        button.setOpaque(true);

        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ServerDAL serverDAL = new ServerDAL();
                currentServer = serverDAL.getServerById(serverId);
                if (currentServer.getStatus().equals("Tắt")) {
                    updateTableStatus("Bật");
                    serverDAL.updateServerStatus(currentServer.getId(), "Bật");
                    new Thread(() -> {
                        RunServer.startServer(currentServer);

                    }).start();

                } else if (currentServer.getStatus().equals("Bật")) {
                    updateTableStatus("Tắt");
                    serverDAL.updateServerStatus(currentServer.getId(), "Tắt");
                    RunServer.stopServer(currentServer);

                }
                fireEditingStopped();
            }
        });
    }

    private void updateTableStatus(String status) {
        int row = table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setValueAt(status, row, 5);
        SwingUtilities.invokeLater(() -> table.repaint());
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        serverId = ((Server) table.getValueAt(row, 0)).getId();
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        return "Bật/Tắt";
    }

    @Override
    public boolean stopCellEditing() {
        return super.stopCellEditing();
    }

    @Override
    protected void fireEditingStopped() {
        super.fireEditingStopped();
    }
}

class ButtonRenderer extends JButton implements TableCellRenderer {

    public ButtonRenderer() {
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

        String status = (String) table.getValueAt(row, 4);
        setText(status);
        return this;
    }
}

class DetailButtonRenderer extends JButton implements TableCellRenderer {

    public DetailButtonRenderer() {
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText("Xem chi tiết");
        return this;
    }
}

class DetailButtonEditor extends DefaultCellEditor {

    protected JButton button;
    private Server currentServer;
    private int serverId;
    private JTable table;

    public DetailButtonEditor(JCheckBox checkBox, JTable table) {
        super(checkBox);
        this.table = table;
        button = new JButton();
        button.setOpaque(true);

        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                serverId = ((Server) table.getValueAt(table.getSelectedRow(), 0)).getId();
                // Open a new window or display details about the selected server.
                openServerDetails(serverId);
                fireEditingStopped();
            }
        });
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        return "Xem chi tiết";
    }

    @Override
    public boolean stopCellEditing() {
        return super.stopCellEditing();
    }

    @Override
    protected void fireEditingStopped() {
        super.fireEditingStopped();
    }

    // Method to open the details window
    private void openServerDetails(int serverId) {
        // This method should open a new window or dialog showing server details
        Server server = new ServerDAL().getServerById(serverId);
        if (RunServer.getMapThreadPoolExecutor().containsKey(ServerHelper.getKeyServer(server))) {
            RunServer.getMapThreadPoolExecutor().get(ServerHelper.getKeyServer(server)).execute(new Admin(server));
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Server chưa được bật ");
        }

    }
}
